import { Request, Response } from "express";
import BltcService from "../services/BltcService";
import CookingService from "../services/CookingService";
import ItemService from "../services/ItemService";
import PriceService from "../services/PriceService";
import * as fs from 'fs';

export default class RefreshController {
    constructor(
        private itemService: ItemService,
        private priceService: PriceService,
        private bltcService: BltcService,
        private cookingService: CookingService,
    ) {
    }

    async refresh(req: Request, res: Response): Promise<void> {
<<<<<<< HEAD
        const requestIds: Array<number> = ((req.query.ids || '') + '').split(',')
            .filter(id => !! id)
            .map(id => +id);

        const filename = './data/ids';
        let fileIds: string = fs.readFileSync(filename, 'utf-8').toString();

        let ids: Array<any> = fileIds
            .split('\n')
            .flatMap(ids => ids.split(','))
            .map(id => +id)
            .filter(id => id > 0);
        ids = ids.concat(await this.getCookingIds())
            .concat(requestIds);
=======
        const rawIds = [
            '19748,19745,19718,19739,19741,19743,82796',
            '19720,19746,19747,19742,19740,19744,46741,72845',
            '19698,19700,19703,19697,19699,19701,19702',
            '19684,19679,19682,19683,19687,19685,19680,19686,19688,19681,94270,46738,46743,80714',
            '19719,19729,19728,19730,19732,19731',
            '19735,19738,19737,19733,19734,19736,46739',
            '19723,19726,19722,19727,19724,19725',
            '19710,19713,19709,19711,19712,19714,46736',
            '24341,24345,24343,24358,24344,24342',
            '24350,24347,24348,24346,24351,24349',
            '24276,24272,24274,24277,24273,24275',
            '24356,24353,24354,24352,24355,24357,48805,36059',
            '24288,24286,24285,24289,24287,24284',
            '24299,24298,24300,24297,24296,24363',
            '24282,24279,24283,24280,24281,24278',
            '24294,24295,24290,24291,24292,24293',
            '37897,73034,44941,74328,83103,71641,74202',
            '24335,24331,24334,24333,24332,75648',
            '24309,24308,24306,24307,24310',
            '24314,24315,24311,24313,24312',
            '24316,24320,24317,24318,24319',
            '24324,24325,24322,24321,24323',
            '43773,89271,24330,24328,24327,24326,24329',
            '24339,24337,24336,24340,24338',
            '24304,24301,24305,67832,24302,24303',
            '70842,68942,75015,75857,71049,71428',
            '43792,43786,43787,43782,43784,43790,43789,43794,43781,43783,43788,43791,43785,43796,43797,43795,43793,43780',
            '43855,43847,43857,43845,43851,43849,43853,43856,43854,43852,43862,43846,43860,43859,43850,43858,43844,43861,43848',
            '71075,74671,77087,74101,71794,73960,74321,73045,71073,73740,75779,72666,71836,72308,72015,71919,73927,73198',
            '47088,73000,73576,72395,76287,70581,75740,71768,76641,73959,75575,76756,74122,71864,76928,73284,73054,72064,71548,75826',
            '43864,43863,43865,71654,76704,73962',
            '23040,23043,19986,19718,19739,19741,19743,19748,19745,19721,46681,19719,19728,19730,19731,19722,19723,19726,19727,19724,19725,19729,19732,19697,19699,19703,19698,19702,19700,19701',
            '19750,19924,19704,66670,75075,6736',
            '21695,21691,21690,21694,21693,21692',
            '21683,21679,21681,21680,21682,21678,43556,41737,43553,41736,41733,41734,43555,43552,43554,24234,41735',
            '22331,21661,80681,21667,21668,79213,21664,21670,79790',
            '21689,21688,21684,21685,21686,21687',
            '21654,21658,21656,21653,21655,21657',
            '21675,21669,21674,21673,21672,21671,21677,21676',
            '22329,22326,22327,22330,22325,22328,74693',
            '21666,21659,21660,21672,21665,21663,21662,79138',
            '79079,79423,66670,82488,66637,24872,8868,67371,67367,77632,36077,96762,24314,24334',
            '9473,8868,21262,36077,12535,67368,67367,77632,24314,96088',
            '9440,67371,36084,8868,67367,8878,36077,19680,97105,12535',
            '9287,19711,12484,67371,24339,67367,36077,12386,12437',
            '67368,96793,36080,24334,8868,12144,19680,97690,12510,36074,91751,12506,12329,12534,19789,8576,12536,24284,77112,19704,12330,21260,24346,12156,82678',
            '24330,71069,36081,8855,12333,8852,36080,8870,36076,12358,12437,97105,24314,12246,12147,36074,91751,81837,19687,12254,77699,12534,12511,97690,8576',
            '8873,21262,95663,67368,8837,12238,67371,67377,77632,8867,8869,9440,67367,97105,8865,36080,8852,8870,8868,12358,24335,8874,12370,36076,74982',
        ];
        let ids: Array<number> = rawIds.join(',').split(',').map(id => +id);
        ids = ids.concat(await this.getCookingIds());
>>>>>>> 3737cca38ce5793b617c6627de676a55da380c03
        ids = [...new Set(ids)];

        let chunkSize = 20;

        fs.truncateSync(filename);

        for (let i = 0; i < ids.length; i += chunkSize) {
            const chunk = ids.slice(i, i + chunkSize);

            fs.appendFileSync(filename, chunk.join(',') + '\n');            
        }       

        chunkSize = 100;

        for (let i = 0; i < ids.length; i += chunkSize) {
            const chunk = ids.slice(i, i + chunkSize);

            await Promise.all([
                this.itemService.getAllByIds(chunk),
                this.priceService.getPricesByIds(chunk),
                this.bltcService.getBltcByIds(chunk),
            ]);
        }

        res.send('done');
    }

    private async getCookingIds(): Promise<Array<number>> {
        const recipes = await this.cookingService.getAll();
        let ids: Array<number> = [];

        for (const recipe of recipes) {
            ids = ids.concat(recipe.input.map(item => item.id))
                .concat(recipe.output.map(item => item.id));
        }

        return ids;
    }
}
